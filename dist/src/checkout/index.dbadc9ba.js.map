{"mappings":"AAIA,MAAMA,EAAa,IC0BJ,MACbC,YAAYC,EAAKC,GACfC,KAAKF,IAAMA,EACXE,KAAKD,eAAiBA,EACtBC,KAAKC,KAAO,GACZD,KAAKE,UAAY,EACjBF,KAAKG,SAAW,EAChBH,KAAKI,IAAM,EACXJ,KAAKK,WAAa,CACpB,CACAC,OACEN,KAAKC,KAAOM,wBAAwBP,KAAKF,KACzCE,KAAKQ,sBACP,CACAA,uBAEE,MAAMC,EAAiBC,SAASC,cAC9BX,KAAKD,eAAiB,eAEDW,SAASC,cAC9BX,KAAKD,eAAiB,eAETa,UAAYZ,KAAKC,KAAKY,OACrC,MAAMC,EAAUd,KAAKC,KAAKc,KAAKC,GAASA,EAAKC,aAC7CjB,KAAKE,UAAYY,EAAQI,QAAO,CAACC,EAAKH,IAASG,EAAMH,IACrDP,EAAeG,UAAY,IAAMZ,KAAKE,SACxC,CACAkB,sBAEEpB,KAAKG,SAAW,GAA8B,GAAxBH,KAAKC,KAAKY,OAAS,GACzCb,KAAKI,KAAwB,IAAjBJ,KAAKE,WAAkBmB,QAAQ,GAC3CrB,KAAKK,YACHiB,WAAWtB,KAAKE,WAChBoB,WAAWtB,KAAKG,UAChBmB,WAAWtB,KAAKI,MAChBiB,QAAQ,GAEVrB,KAAKuB,oBACP,CACAA,qBAEE,MAAMpB,EAAWO,SAASC,cAAcX,KAAKD,eAAiB,cACxDK,EAAMM,SAASC,cAAcX,KAAKD,eAAiB,SACnDM,EAAaK,SAASC,cAC1BX,KAAKD,eAAiB,gBAExBI,EAASqB,UAAY,IAAMxB,KAAKG,SAChCC,EAAIoB,UAAY,IAAMxB,KAAKI,IAC3BC,EAAWmB,UAAY,IAAMxB,KAAKK,UACpC,CACAoB,iBACE,MAEMC,EA9EV,SAAwBC,GACtB,MAAMC,EAAW,IAAIC,SAASF,GAC5BG,EAAgB,CAAC,EAMnB,OAJAF,EAASG,SAAQ,SAAUC,EAAOlC,GAChCgC,EAAchC,GAAOkC,CACvB,IAEOF,CACT,CAqEiBG,CAFOvB,SAASwB,MAAM,UAInCR,EAAKS,UAAY,IAAIC,KACrBV,EAAKrB,WAAaL,KAAKK,WACvBqB,EAAKtB,IAAMJ,KAAKI,IAChBsB,EAAKvB,SAAWH,KAAKG,SACrBuB,EAAKW,MAAqBrC,KAAKC,KAvEHc,KAAKC,IACjCsB,QAAQC,IAAIvB,GACL,CACLwB,GAAIxB,EAAKwB,GACTC,MAAOzB,EAAKC,WACZyB,KAAM1B,EAAK2B,KACXC,SAAU,MAkEZN,QAAQC,IAAIb,GACZ,IACE,MAAMmB,QAAYC,SAASC,SAASrB,GACpCY,QAAQC,IAAIM,GACZG,gBAAgB,UAAU,IAC1BC,SAASC,OAAO,yBAClB,CAAE,MAAOC,GACP,IAAK,IAAIC,KAAWD,EAAIC,QACtBC,aAAaF,EAAIC,QAAQA,GAG7B,CACF,GDlGqC,UAAW,oBAClDxD,IAEAc,SACGC,cAAc,QACd2C,iBAAiB,OAAQ1D,EAAWwB,oBAAoBmC,KAAK3D,IAEhEc,SAASC,cAAc,mBAAmB2C,iBAAiB,SAAUE,IACnEA,EAAEC,iBACF,IAAIC,EAAShD,SAASwB,MAAM,GACxByB,EAAaD,EAAOE,gBACxBF,EAAOG,iBACHF,GAAY/D,EAAWmD,UAAQ","sources":["src/js/checkout.js","src/js/checkOutProcess.mjs"],"sourcesContent":["import CheckoutProcess from \"./checkOutProcess.mjs\";\r\n// import { loadHeaderFooter } from './utils.mjs';\r\n// import Storage from \"..localStorage.mjs\";\r\n\r\nconst mycheckOut = new CheckoutProcess(\"so-cart\", \"checkout-summary\");\r\nmycheckOut();\r\n\r\ndocument\r\n  .querySelector(\"#zip\")\r\n  .addEventListener(\"blur\", mycheckOut.calculateOrdertotal.bind(mycheckOut));\r\n// listening for click on the button\r\ndocument.querySelector(\"#checkoutSubmit\").addEventListener(\"click\", (e) => {\r\n  e.preventDefault();\r\n  let myForm = document.forms[0];\r\n  let chk_status = myForm.checkValidity();\r\n  myForm.reportValidity();\r\n  if (chk_status) mycheckOut.checkout();\r\n});\r\n\r\n","// import { getLocalStorage, setLocalStorage } from \"./utils.mjs\";\r\n// import Storage from \"../localStorage.mjs\";\r\nimport ExternalServices from \"./ExternalServices.mjs\";\r\n\r\n// takes a form element and returns an object where the key is the \"name\" of the form input.\r\nfunction formDataToJSON(formElement) {\r\n  const formData = new FormData(formElement),\r\n    convertedJSON = {};\r\n\r\n  formData.forEach(function (value, key) {\r\n    convertedJSON[key] = value;\r\n  });\r\n\r\n  return convertedJSON;\r\n}\r\n\r\nfunction packageItems(items) {\r\n  // convert the list of products from localStorage to the simpler form required for the checkout process. Array.map would be perfect for this.\r\n  const simplifiedItems = items.map((item) => {\r\n    console.log(item);\r\n    return {\r\n      id: item.id,\r\n      price: item.FinalPrice,\r\n      name: item.Name,\r\n      quantity: 1,\r\n    };\r\n  });\r\n  return simplifiedItems;\r\n}\r\n\r\nexport default class CheckoutProcess {\r\n  constructor(key, outputSelector) {\r\n    this.key = key;\r\n    this.outputSelector = outputSelector;\r\n    this.list = [];\r\n    this.itemTotal = 0;\r\n    this.shipping = 0;\r\n    this.tax = 0;\r\n    this.orderTotal = 0;\r\n  }\r\n  init() {\r\n    this.list = getCartFromLocalStorage(this.key);\r\n    this.calculateItemSummary();\r\n  }\r\n  calculateItemSummary() {\r\n    // calculate and display the total amount of the items in the cart, and the number of items.\r\n    const summaryElement = document.querySelector(\r\n      this.outputSelector + \" #cartTotal\"\r\n    );\r\n    const itemNumElement = document.querySelector(\r\n      this.outputSelector + \" #num-items\"\r\n    );\r\n    itemNumElement.innerHTML = this.list.length;\r\n    const amounts = this.list.map((item) => item.FinalPrice);\r\n    this.itemTotal = amounts.reduce((sum, item) => sum + item);\r\n    summaryElement.innerHTML = \"$\" + this.itemTotal;\r\n  }\r\n  calculateOrdertotal() {\r\n    // calculate the shipping and tax amounts. Then use them to along with the cart total to figure out the order total\r\n    this.shipping = 10 + (this.list.length - 1) * 2;\r\n    this.tax = (this.itemTotal * 0.06).toFixed(2);\r\n    this.orderTotal = (\r\n      parseFloat(this.itemTotal) +\r\n      parseFloat(this.shipping) +\r\n      parseFloat(this.tax)\r\n    ).toFixed(2);\r\n    // display the totals.\r\n    this.displayOrderTotals();\r\n  }\r\n  displayOrderTotals() {\r\n    // once the totals are all calculated display them in the order summary page\r\n    const shipping = document.querySelector(this.outputSelector + \" #shipping\");\r\n    const tax = document.querySelector(this.outputSelector + \" #tax\");\r\n    const orderTotal = document.querySelector(\r\n      this.outputSelector + \" #orderTotal\"\r\n    );\r\n    shipping.innerText = \"$\" + this.shipping;\r\n    tax.innerText = \"$\" + this.tax;\r\n    orderTotal.innerText = \"$\" + this.orderTotal;\r\n  }\r\n  async checkout() {\r\n    const formElement = document.forms[\"checkout\"];\r\n\r\n    const json = formDataToJSON(formElement);\r\n    // add totals, and item details\r\n    json.orderDate = new Date();\r\n    json.orderTotal = this.orderTotal;\r\n    json.tax = this.tax;\r\n    json.shipping = this.shipping;\r\n    json.items = packageItems(this.list);\r\n    console.log(json);\r\n    try {\r\n      const res = await services.checkout(json);\r\n      console.log(res);\r\n      setLocalStorage('so-cart',[]);\r\n      location.assign('/checkout/success.html');\r\n    } catch (err) {\r\n      for (let message in err.message){\r\n        alertMessage(err.message[message]);\r\n      }\r\n      \r\n    }\r\n  }\r\n}"],"names":["$bd24e26fd5677e8d$var$mycheckOut","constructor","key","outputSelector","this","list","itemTotal","shipping","tax","orderTotal","init","getCartFromLocalStorage","calculateItemSummary","summaryElement","document","querySelector","innerHTML","length","amounts","map","item","FinalPrice","reduce","sum","calculateOrdertotal","toFixed","parseFloat","displayOrderTotals","innerText","async","json","formElement","formData","FormData","convertedJSON","forEach","value","$3b58ed898c75658f$var$formDataToJSON","forms","orderDate","Date","items","console","log","id","price","name","Name","quantity","res","services","checkout","setLocalStorage","location","assign","err","message","alertMessage","addEventListener","bind","e","preventDefault","myForm","chk_status","checkValidity","reportValidity"],"version":3,"file":"index.dbadc9ba.js.map"}