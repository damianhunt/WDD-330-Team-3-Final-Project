{"mappings":"AAGe,MAAAA,EACbC,oBACE,IACE,IAAIC,QAAeC,MANf,qCAOJ,GAAID,EAAOE,GAAI,CAGb,aAFiBF,EAAOG,MAI1B,CACF,CAAE,MAAOC,GACP,OAAOC,QAAQC,IAAIF,EACrB,CACF,ECVF,MAAeG,EAEbC,oBAAoBC,GAClBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,GAClD,CAGAD,kBAAkBM,GAEhB,OADeF,KAAKG,MAAML,aAAaM,QAAQ,aAC/BC,MAAMC,GAAYA,EAAQJ,IAAMA,GAClD,CAGAN,uBAAuBW,GACrBT,aAAaC,QAAQ,OAAQC,KAAKC,UAAUM,GAC9C,CAGAX,iCACE,IAAIY,EAAWR,KAAKG,MAAML,aAAaM,QAAQ,SAC/C,GAAiB,OAAbI,EACF,OAAQA,EAGR,MADW,EAGf,ECxBF,MAAMC,EAAUC,SAASC,cAAc,aACjCC,EAAkBF,SAASC,cAAc,eACzCE,EAAkBH,SAASC,cAAc,eAIzCG,GAHaJ,SAASC,cAAc,kBAG1BD,SAASC,cAAc,UACjCI,EAAcL,SAASC,cAAc,iBAErCK,EAAmBN,SAASC,cAAc,kBAC1CM,EAAaP,SAASC,cAAc,eACpCO,EAAYR,SAASC,cAAc,eACnCQ,EAAcT,SAASC,cAAc,iBAMvBD,SAASC,cAAc,eAA3C,IAGIS,EAAO,GAGPC,EAAkB,GAEtB,MAAMC,EACJC,gBAAgBC,GACd,IAAIpC,EAAS,GACboC,EAAMC,SAASnB,IACblB,GAAU,8FAESkB,EAAQoB,sFACepB,EAAQJ,uJAKtCI,EAAQqB,yCACErB,EAAQsB,OAAOC,+BACvBvB,EAAQwB,kCACP,IAEjBd,EAAiBe,UAAY3C,CAC/B,CAEA4C,aACE,MAAMC,EAAU,IAAIvB,SAASwB,iBAAiB,aAC9Cb,EAAkBY,EAElBA,EAAQR,SAASU,IACf,IAAIjC,EAAKiC,EAAOC,QAAQlC,GACRkB,EAAKf,MAAMgC,GAASA,EAAKnC,KAAOA,MAE9CiC,EAAOG,UAAY,UACnBH,EAAOI,UAAW,GAGpBJ,EAAOK,iBAAiB,SAAUC,IAChCA,EAAMC,OAAOJ,UAAY,UACzBG,EAAMC,OAAOH,UAAW,EAExB,IAAII,EAAW,IAAKhD,EAAQiD,WAAW1C,GAAK2C,MAAO,GAGnDzB,EAAO,IAAIA,EAAMuB,GAGjBhD,EAAQmD,gBAAgB1B,GAExB2B,KAAKC,oBAAoB5B,GAEzB2B,KAAKE,YAAYN,GAGjBI,KAAKG,cAAY,GACnB,GAEJ,CAEAF,oBAAoBzC,GAClB,IAAI4C,EAAY,EACZC,EAAa,EAEjB7C,EAAK8C,KAAKhB,IACRc,GAAad,EAAKP,MAAQO,EAAKQ,MAC/BO,GAAcf,EAAKQ,KAAK,IAE1B3B,EAAUoB,UAAYgB,WAAWH,EAAUI,QAAQ,IAEnDtC,EAAWqB,UAAYc,CACzB,CAKAH,YAAYZ,GACV,MAAMmB,EAAM9C,SAAS+C,cAAc,OACnCD,EAAIE,UAAUC,IAAI,aAClBH,EAAIzB,UAAY,0BACGM,EAAKX,aAAaW,EAAKV,kDAExBU,EAAKV,qCACHU,EAAKP,iEACuBO,EAAKnC,6IAKFmC,EAAKnC,mDACnBmC,EAAKQ,qEACWR,EAAKnC,8BAG1DiB,EAAYyC,YAAYJ,EAK1B,CAEAN,eACEnC,EAAY2C,UAAUC,IAAI,oBAC1B7C,EAAQ4C,UAAUC,IAAI,eACxB,CAEAE,mBACEzC,EAAOzB,EAAQmE,0BACff,KAAKC,oBAAoB5B,GACzB2B,KAAKgB,WAAW3C,GAChBX,EAAQ+B,iBAAiB,QAASO,KAAKG,cACvCtC,EAAgB4B,iBAAiB,QAASO,KAAKiB,SACjD,CAEAD,WAAWxD,GACTA,EAAKkB,SAASY,IACZU,KAAKE,YAAYZ,EAAA,GAErB,CAEA2B,WACEjD,EAAY2C,UAAUO,OAAO,oBAC7BnD,EAAQ4C,UAAUO,OAAO,eAC3B,CAEAC,oBAEErD,EAAgB2B,iBAAiB,SAAS,KACxCO,KAAKoB,WAAS,IAIhBhD,EAAYqB,iBAAiB,SAAUC,IACrC,GAAIA,EAAMC,OAAOgB,UAAUU,SAAS,eAAgB,CAElD,IAAIC,EAAiB5B,EAAMC,OACvB4B,EAASD,EAAejC,QAAQlC,GAGpCiB,EAAYoD,YAAYF,EAAeG,cAAcA,eAErDzB,KAAKsB,eAAeI,SAASH,GAC/B,MAAO,GAAI7B,EAAMC,OAAOgB,UAAUU,SAAS,iBAAkB,CAC3D,IAAIM,EAAWjC,EAAMC,OACjB4B,EAASI,EAAStC,QAAQlC,GAC1ByE,EAAevD,EAAKf,MAAMgC,GAASA,EAAKnC,KAAOuE,SAASH,KAC5DK,EAAa9B,MAAQ8B,EAAa9B,MAAQ,EAC1ClD,EAAQmD,gBAAgB1B,GACxB2B,KAAKC,oBAAoB5B,GACzBsD,EAASE,mBAAmBtC,UAAYqC,EAAa9B,KAEvD,MAAO,GAAIJ,EAAMC,OAAOgB,UAAUU,SAAS,mBAAoB,CAC7D,IAAIS,EAAgBpC,EAAMC,OACtB4B,EAASO,EAAczC,QAAQlC,GAC/ByE,EAAevD,EAAKf,MAAMgC,GAASA,EAAKnC,KAAOuE,SAASH,KAC5DK,EAAa9B,MAAQ8B,EAAa9B,MAAQ,EACtC8B,EAAa9B,MAAQ,GACvBlD,EAAQmD,gBAAgB1B,GACxB2B,KAAKC,oBAAoB5B,GACzByD,EAAcC,uBAAuBxC,UAAYqC,EAAa9B,QAG9D1B,EAAYoD,YAAYM,EAAcL,cAAcA,eACpDzB,KAAKsB,eAAeI,SAASH,IAIjC,IAEJ,CAEAH,YAOE,IALA/C,EAAO,GACP2B,KAAKC,oBAAoB5B,GACzBzB,EAAQmD,gBAAgB1B,GAGjBD,EAAY4D,SAASC,OAAS,GACnC7D,EAAYoD,YAAYpD,EAAY4D,SAAS,IAI/C1D,EAAgBI,SAASU,IACvBA,EAAOI,UAAW,EAClBJ,EAAOJ,UAAY,iDAAiD,IAGtEgB,KAAKiB,UACP,CAEAK,eAAenE,GACbT,QAAQC,IAAIQ,GACZkB,EAAOA,EAAK6D,QAAQtC,GAAaA,EAASzC,KAAOA,IACjDT,QAAQC,IAAI0B,GAEZ2B,KAAKC,oBAAoB5B,GAEzBzB,EAAQmD,gBAAgB1B,GACxB,IAAIe,EAASY,KAAKmC,aAAahF,GAC/BiC,EAAOI,UAAW,EAClBJ,EAAOJ,UAAY,iDACrB,CAEAmD,aAAahF,GACX,OAAOmB,EAAgBhB,MAAM8B,GAAWA,EAAOC,QAAQlC,KAAOA,GAChE,EAKFQ,SAAS8B,iBAAiB,oBAAoB,KAC5C,MAAM2C,EAAK,IAAI7D,EACTzB,EAAW,IAAIX,EAErBiG,EAAGtB,mBAEHhE,EACGuF,cACAC,MAAMxF,IACLsF,EAAG5D,gBAAgB1B,GAEnBF,EAAQ2F,aAAazF,EAAA,IAEtBwF,MAAK,KACJF,EAAGnD,aACHmD,EAAGjB,mBAAiB,GACtB","sources":["src/getproducts.mjs","src/localStorage.mjs","src/main.js"],"sourcesContent":["let url = \"https://fakestoreapi.com/products\";\r\n//getting the products from API\r\n\r\nexport default class Products {\r\n  async getProducts() {\r\n    try {\r\n      let result = await fetch(url);\r\n      if (result.ok) {\r\n        let data = await result.json();\r\n       //console.log(data);\r\n        return data;\r\n        \r\n      }\r\n    } catch (error) {\r\n      return console.log(error);\r\n    }\r\n  }\r\n}","//local storage\r\n// establish a function that takes an array and stringfy it\r\n/*\r\nwhen you access the localStorage there is many functions available to you this time use the setItem\r\n then pass the first argument is a key that will be matched with an array of the products passed as an argument \r\n*/\r\nexport default class Storage {\r\n  //this saves the products catalogue to the local storage\r\n  static saveProducts(products) {\r\n    localStorage.setItem(\"products\", JSON.stringify(products));\r\n  }\r\n\r\n  //this one gets the product we have selected based on product id from the localstorage\r\n  static getProduct(id) {\r\n    let products = JSON.parse(localStorage.getItem(\"products\"));\r\n    return products.find((product) => product.id == id);\r\n  }\r\n\r\n  //this saves the products selected to the local storage under cart\r\n  static saveCurrentCart(cart) {\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n  }\r\n\r\n  //get cart from local storage\r\n  static getCartFromLocalStorage() {\r\n    let cartData = JSON.parse(localStorage.getItem(\"cart\"));\r\n    if (cartData !== null) {\r\n      return  cartData;\r\n    } else {\r\n      let cart = [];\r\n      return  cart;\r\n    }\r\n  }\r\n}","//import Ui from \"./displayProducts.mjs\";\r\nimport Products from \"./getproducts.mjs\";\r\nimport Storage from \"./localStorage.mjs\";\r\nimport { loadHeaderFooter } from './utils.mjs';\r\n\r\n//loadHeaderFooter();\r\n\r\n//variables\r\nconst cartBtn = document.querySelector(\".cart-btn\");\r\nconst closeCartButton = document.querySelector(\".close-cart\");\r\nconst clearCartButton = document.querySelector(\".clear-cart\");\r\nconst cartNavBtn = document.querySelector(\".nav-icon-cart\");\r\n\r\n//cart nodes from the dom\r\nconst cartDom = document.querySelector(\".cart\");\r\nconst cartOverlay = document.querySelector(\".cart-overlay\");\r\n\r\nconst productsInTheDOM = document.querySelector(\".products-area\");\r\nconst cartIterms = document.querySelector(\".cart-items\");\r\nconst cartTotal = document.querySelector(\".cart-total\");\r\nconst cartContent = document.querySelector(\".cart-content\");\r\n//const cartContent = document.querySelector(\".cart-content\");\r\n//\r\n\r\n//Checkout//\r\n\r\nlet checkoutTotal = document.querySelector(\"#orderTotal\");\r\n\r\n//\r\nlet cart = [];\r\n\r\n//\r\nlet buttonsInTheDOM = [];\r\n//generate Ui\r\nclass UI {\r\n  displayProducts(stock) {\r\n    let result = \"\";\r\n    stock.forEach((product) => {\r\n      result += `<article class=\"product\">\r\n            <div class=\"img-container\">\r\n              <img src=${product.image} alt=\"\" class=\"product-img\" />\r\n              <button class=\"bag-btn\" data-id=${product.id}>\r\n                <i class=\"fas fa-shopping-cart\"></i>\r\n                add to bag\r\n              </button>\r\n            </div>\r\n            <h3>${product.title}</h3>\r\n            <P>popularity ${product.rating.rate}</p>\r\n            <h4>R ${product.price}</h4>\r\n          </article>`;\r\n    });\r\n    productsInTheDOM.innerHTML = result;\r\n  }\r\n\r\n  getBtnsBag() {\r\n    const buttons = [...document.querySelectorAll(\".bag-btn\")];\r\n    buttonsInTheDOM = buttons;\r\n    //console.log(buttons);\r\n    buttons.forEach((button) => {\r\n      let id = button.dataset.id;\r\n      let inTheCart = cart.find((item) => item.id === id);\r\n      if (inTheCart) {\r\n        button.innerText = \"In Cart\";\r\n        button.disabled = true;\r\n      }\r\n\r\n      button.addEventListener(\"click\", (event) => {\r\n        event.target.innerText = \"In Cart\";\r\n        event.target.disabled = true;\r\n        //get product from the stock or products from local storage and store it in a object\r\n        let cartItem = { ...Storage.getProduct(id), units: 1 };\r\n\r\n        //add item or product clicked or chosen to the cartarray\r\n        cart = [...cart, cartItem];\r\n\r\n        //save stored cart to the local storage\r\n        Storage.saveCurrentCart(cart);\r\n        //set cartvalues =>cart array\r\n        this.updateSetCartValues(cart);\r\n        //diplay cart item\r\n        this.addCartItem(cartItem);\r\n\r\n        //show cart\r\n        this.showCaseCart();\r\n      });\r\n    });\r\n  }\r\n\r\n  updateSetCartValues(cart) {\r\n    let tempTotal = 0;\r\n    let itemsTotal = 0;\r\n\r\n    cart.map((item) => {\r\n      tempTotal += item.price * item.units;\r\n      itemsTotal += item.units;\r\n    });\r\n    cartTotal.innerText = parseFloat(tempTotal.toFixed(2));\r\n    //checkoutTotal.innerHTML = cartTotal\r\n    cartIterms.innerText = itemsTotal;\r\n  }\r\n\r\n\r\n  /*The problem is that when i click add item it is added to cart but then not injected into the dom*/\r\n  //this function creates a templateand inserts items that has been selected\r\n  addCartItem(item) {\r\n    const div = document.createElement(\"div\");\r\n    div.classList.add(\"cart-item\");\r\n    div.innerHTML = `\r\n            <img src=${item.image} alt=${item.title}>\r\n            <div>\r\n                <h4>${item.title}</h4>\r\n                <h5>R ${item.price}</h5>\r\n                <span class=\"remove-item\" data-id=${item.id}>\r\n        remove\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <i class=\"fas fa-chevron-up\" data-id=${item.id}></i>\r\n                <p class=\"item-amount\">${item.units}</p>\r\n                <i class=\"fas fa-chevron-down\" data-id=${item.id}></i>\r\n            </div>`;\r\n    //console.log(cartDom)\r\n    cartContent.appendChild(div);\r\n\r\n    //cartDom.appendChild(cartContent);\r\n    //cartOverlay.appendChild(cartDom);\r\n    //console.log(cartDom)\r\n  }\r\n\r\n  showCaseCart() {\r\n    cartOverlay.classList.add(\"transparentCover\");\r\n    cartDom.classList.add(\"showCaseCart\");\r\n  }\r\n\r\n  setUpApplication() {\r\n    cart = Storage.getCartFromLocalStorage();\r\n    this.updateSetCartValues(cart);\r\n    this.fillupCart(cart);\r\n    cartBtn.addEventListener(\"click\", this.showCaseCart);\r\n    closeCartButton.addEventListener(\"click\", this.hideCart);\r\n  }\r\n\r\n  fillupCart(cart) {\r\n    cart.forEach((item) => {\r\n      this.addCartItem(item);\r\n    });\r\n  }\r\n\r\n  hideCart() {\r\n    cartOverlay.classList.remove(\"transparentCover\");\r\n    cartDom.classList.remove(\"showCaseCart\");\r\n  }\r\n\r\n  cartFunctionality() {\r\n    //this is for cart clear button\r\n    clearCartButton.addEventListener(\"click\", () => {\r\n      this.clearCart();\r\n    });\r\n\r\n    //inside cart logic\r\n    cartContent.addEventListener(\"click\", (event) => {\r\n      if (event.target.classList.contains(\"remove-item\")) {\r\n        //store the item in a variable\r\n        let removeThisItem = event.target;\r\n        let itemId = removeThisItem.dataset.id;\r\n\r\n        // this line below is for removing from the dom\r\n        cartContent.removeChild(removeThisItem.parentElement.parentElement);\r\n        //this one below is for removing from cart array\r\n        this.removeThisItem(parseInt(itemId));\r\n      } else if (event.target.classList.contains(\"fa-chevron-up\")) {\r\n        let addunits = event.target;\r\n        let itemId = addunits.dataset.id;\r\n        let temperalItem = cart.find((item) => item.id === parseInt(itemId));\r\n        temperalItem.units = temperalItem.units + 1;\r\n        Storage.saveCurrentCart(cart);\r\n        this.updateSetCartValues(cart);\r\n        addunits.nextElementSibling.innerText = temperalItem.units;\r\n\r\n      } else if (event.target.classList.contains(\"fa-chevron-down\")) {\r\n        let subtractunits = event.target;\r\n        let itemId = subtractunits.dataset.id;\r\n        let temperalItem = cart.find((item) => item.id === parseInt(itemId));\r\n        temperalItem.units = temperalItem.units - 1;\r\n        if (temperalItem.units > 0) {\r\n          Storage.saveCurrentCart(cart);\r\n          this.updateSetCartValues(cart);\r\n          subtractunits.previousElementSibling.innerText = temperalItem.units;\r\n\r\n        } else {\r\n          cartContent.removeChild(subtractunits.parentElement.parentElement);\r\n          this.removeThisItem(parseInt(itemId));\r\n        }\r\n       \r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  clearCart() {\r\n    // Remove all items from the cart array\r\n    cart = [];\r\n    this.updateSetCartValues(cart);\r\n    Storage.saveCurrentCart(cart);\r\n\r\n    // Remove all items from the cart DOM\r\n    while (cartContent.children.length > 0) {\r\n      cartContent.removeChild(cartContent.children[0]);\r\n    }\r\n\r\n    // Enable all add to cart buttons\r\n    buttonsInTheDOM.forEach((button) => {\r\n      button.disabled = false;\r\n      button.innerHTML = `<i class=\"fas fa-shopping-cart\"></i>add to cart`;\r\n    });\r\n\r\n    this.hideCart();\r\n  }\r\n\r\n  removeThisItem(id) {\r\n    console.log(id);\r\n    cart = cart.filter((cartItem) => cartItem.id !== id);\r\n    console.log(cart);\r\n    //console.log(cart);\r\n    this.updateSetCartValues(cart);\r\n    //save cart in local storage\r\n    Storage.saveCurrentCart(cart);\r\n    let button = this.getSingleBtn(id);\r\n    button.disabled = false;\r\n    button.innerHTML = `<i class=\"fas fa-shopping-cart\"></i>add to cart`;\r\n  }\r\n\r\n  getSingleBtn(id) {\r\n    return buttonsInTheDOM.find((button) => button.dataset.id === id);\r\n  }\r\n} // end of UI  class\r\n\r\n//storage\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const ui = new UI();\r\n  const products = new Products();\r\n  // set up application\r\n  ui.setUpApplication();\r\n  //get all products\r\n  products\r\n    .getProducts()\r\n    .then((products) => {\r\n      ui.displayProducts(products);\r\n\r\n      Storage.saveProducts(products);\r\n    })\r\n    .then(() => {\r\n      ui.getBtnsBag();\r\n      ui.cartFunctionality();\r\n    });\r\n});"],"names":["$1324166bb9ab97ae$export$2e2bcd8739ae039","async","result","fetch","ok","json","error","console","log","$7e738937c72e32c6$export$2e2bcd8739ae039","static","products","localStorage","setItem","JSON","stringify","id","parse","getItem","find","product","cart","cartData","$2b6e161c9edcf319$var$cartBtn","document","querySelector","$2b6e161c9edcf319$var$closeCartButton","$2b6e161c9edcf319$var$clearCartButton","$2b6e161c9edcf319$var$cartDom","$2b6e161c9edcf319$var$cartOverlay","$2b6e161c9edcf319$var$productsInTheDOM","$2b6e161c9edcf319$var$cartIterms","$2b6e161c9edcf319$var$cartTotal","$2b6e161c9edcf319$var$cartContent","$2b6e161c9edcf319$var$cart","$2b6e161c9edcf319$var$buttonsInTheDOM","$2b6e161c9edcf319$var$UI","displayProducts","stock","forEach","image","title","rating","rate","price","innerHTML","getBtnsBag","buttons","querySelectorAll","button","dataset","item","innerText","disabled","addEventListener","event","target","cartItem","getProduct","units","saveCurrentCart","this","updateSetCartValues","addCartItem","showCaseCart","tempTotal","itemsTotal","map","parseFloat","toFixed","div","createElement","classList","add","appendChild","setUpApplication","getCartFromLocalStorage","fillupCart","hideCart","remove","cartFunctionality","clearCart","contains","removeThisItem","itemId","removeChild","parentElement","parseInt","addunits","temperalItem","nextElementSibling","subtractunits","previousElementSibling","children","length","filter","getSingleBtn","ui","getProducts","then","saveProducts"],"version":3,"file":"index.82ba24b2.js.map"}